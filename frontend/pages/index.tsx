"use client";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { FrogCard } from "../components/FrogCard";
import {
  verify,
  EdDSAFrogPCD,
  EdDSAFrogPCDPackage,
  deserialize,
} from "@pcd/eddsa-frog-pcd";
import { useEffect, useState, Children, cloneElement } from "react";
import {
  getWithoutProvingUrl,
  openPassportPopup,
  usePassportPopupMessages,
} from "@pcd/passport-interface";
import {generateProof} from "../utils/generateProof"

const expectedPublicKey = [
  "0f183dcba06341a4549d78c3f8ca0060a9d6aca795103cb6957d1e2973b5fdeb",
  "2a2eb70efeebb5facca2f3668ca5642513be542bab285055ccdcbc18cc125fd5",
];

const Index: NextPage = () => {
  const [isValid, setIsValid] = useState(false);
  const [passportPCDString] = usePassportPopupMessages();
  const [pcd, setPcd] = useState<EdDSAFrogPCD | undefined>(undefined);
  const pcdCard = <FrogCard pcd={pcd} isDead={true} />;

  useEffect(() => {
    const checkIsValid = async () => {
      if (!passportPCDString) return;
      await EdDSAFrogPCDPackage.init?.({
        makeEncodedVerifyLink: (pcd) => "http://ok.com",
      });
      console.log(passportPCDString);
      const pcd = await deserialize(JSON.parse(passportPCDString).pcd);
      const isValid = await verify(pcd);
      try {
        if (
          pcd.proof.eddsaPCD.claim.publicKey[0] !== expectedPublicKey[0] ||
          pcd.proof.eddsaPCD.claim.publicKey[1] !== expectedPublicKey[1]
        )
          throw new Error("wrong public key");
        setIsValid(isValid);
        setPcd(pcd);
        console.log(pcd);
      } catch (e) {
        // not valid
        console.error(e);
      }
    };
    checkIsValid();
  }, [passportPCDString]);

  const doPopup = async () => {
    const url = getWithoutProvingUrl(
      "https://zupass.org",
      window.location.origin + "/popup",
      EdDSAFrogPCDPackage.name
    );
    openPassportPopup("/popup", url);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>{"Sacrificial frog "}</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <h1 className={styles.top}>Battle of the Frogs</h1>
      <div className={styles.flexRow}>
        <div className={styles.flexCol}>
          <button onClick={doPopup}>Select Your Frog Fighter</button>
          <div>
            {pcd && (
              <>
                <div className={styles.frogContainer}>{pcdCard}</div>
              </>
            )}
          </div>
        </div>
        <div className={styles.flexCol}>
          <button onClick={doPopup}>Fight a Random Frog Fighter</button>
          <div>
            {pcd && (
              <>
                <div className={styles.frogContainer}>{pcdCard}</div>
              </>
            )}
          </div>
        </div>
      </div>
      <main className={styles.main}>
        {/* <button onClick={doPopup}>Sacrifice frog</button> */}
        <button>There will be blood...</button>
      </main>
    </div>
  );
};

export default Index;
